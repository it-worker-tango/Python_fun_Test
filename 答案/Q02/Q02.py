'''
【Q02】数列的四则运算

在一串数字中加入适当的运算符，使其结果和是原来的数字的翻转，
同时要遵循四则运算的顺序进行（先乘除，后加减。）
某些位数之间可以没有运算符，但至少要插入一个运算符。

例如：在100~999，符合条件的有一下几种情况：

351 → 3 * 51 = 153

621 → 6 * 21 = 126

886 → 8 * 86 = 688

问题：求位于1000~9999，满足上述条件的数。
'''
def Q02():
    oplist = ['+', '-', '*', '//', ''] # 这里用到了//是Python中的整除运算，‘’为没有运算符。
    for i in range(1000,10000): # 从1000开始循环到9999
        num_str = str(i) # 将i转换成字符串，方便后面的运算
        for op1 in oplist: # 第一个运算符
            for op2 in oplist: # 第二个运算符
                for op3 in oplist: # 第三个运算符
                    val = num_str[0] + op1 + num_str[1] + op2 + num_str[2] + op3 + num_str[3]
                    try:
                        temp = str(eval(val)) # temp为拼接后的字符串的运算结果，需要转换成字符串，以便后面翻转。
                        if num_str == temp[::-1] and len(val) >4:# 因为题目要求至少有一个运算符
                            print("符合条件的数字为：{},表达式为{},其运算结果为：{}".format(num_str,val,temp))
                    except:
                        pass # 对算式不正确的不进行任何处理

if __name__ == "__main__":Q02()